# Nome do Workflow
name: DevOpsLab Pipeline

# Evento que irá acionar a pipeline
# (on) ativa o evento (push) de push (branches) na branch (main) main
on: 
  push:
    branches:
      - main

# Descrição dos jobs da pipe
# (build) nome do job 
#(runs-on) define a máquina virtual com sistema operacional na versão XYZ que o job será executado
#(steps) definimos as atividades do Job, no caso o step se chama Git Clone (name) 
# esse step usa uma action (uses) chamada checkout na versão 2 (que copia o código do github para a vm)
#eu poderia colocar o comando direto ao invés de usar a action usando um run: git clone https://github.com/evelynesa/devOpsLab.git

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Git Clone
        uses: actions/checkout@v2
        
        #agora vamos instalar o Python que é a linguagem da nossa aplicacao
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
        #agora vamos instalar o Flask que é lib do Python para testes
      - name: Install Requirements
        run:  pip install flask
        
        #agora vamos executar o comando de testes              
      - name: Unit Test
        run: python -m unittest -v test
      
      #agora vamos adicionar a stack do sonar para que seja feita a qualidade de código
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#Agora vamos configurar o deploy da aplicacao no Orquestrador de Containers
  Deploy:
    needs: Build #efetua o deploy apenas se o Build escrito na linha 19 rodar com sucesso. (needs) dependencia
    runs-on: ubuntu-latest #no Ubuntu na ultima versao

    steps:
      - name: Checkout Repo #clona o repositorio novamente porque será feito o build em outra maquina no caso a maquina do Heroku
        uses: actions/checkout@v2 #usando a action checkout na versao 2
        with:
          fetch-depth: 0

      # Autenticação do Heroku CLI via API TOKEN
      # passo a passo aqui: https://devcenter.heroku.com/articles/authentication
      - name: Heroku Login
        #agora vamos criar um arquivo com o nome .netrc e o conteudo desse arquivo sao as linhas de 56 a 61
        run: | 
            cat > ~/.netrc <<EOF #cria um arquivo com o nome .netrc e o conteudo desse arquivo sao as linhas de 55 a 60
              machine api.heroku.com
                login $HEROKU_EMAIL
                password $HEROKU_API_KEY
              machine git.heroku.com
                login $HEROKU_EMAIL
                password $HEROKU_API_KEY
            EOF
        #Agora estamos pegando os valores do secrets e colocando nas variaveis de ambiente para poder logar no Heroku
        env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
            HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}

      # Adicionando o Repositório Remoto do Heroku para poder enviar o código da app
      - name: Add Heroku Remote
        run: heroku git:remote --app $HEROKU_APP_NAME
        env:
            HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}

      # Enviando o código da App para o Heroku fazer Deploy
      - name: Push to Heroku & Deploy
        run: git push heroku HEAD:main --force